# To do: 
#     else:
#        return -1e-2  
# While checking everything


""" Created on Sun Jun 10 15:50:48 2018
Author: Nicholas Irvin

Purpose: Execute detailed-balance calculations for the ideal efficiencies of 
solar cells. 

These calculations are quantum as opposed to thermodynamic, as 
they rely upon the quantum calculation of the particle flux of the sun and the 
solar cell. 

This module serves to set the parameters for the calculation. The module 
single_cell calculates the max power generated by a single cell of bandgap E1 and
upper energy limit E2. The module stack optimizes configuration of energy limits
for stack's total power generation. """

#Import libraries
from stack import optimize_stack






# Vary the cell temeprature
for j in range(25,26):
    T_cell = 273.15 + j  # (K)    
    
    lower_limits = [.975, 1.70] # (eV) lower energy bounds for the sampled bandgap ranges.
    upper_limits = [.985, 1.71] #1.6 2.1(eV) Upper bounds for the sampled bandgap ranges.
    # Round lower_limits and upper_limits to the tenths place. 
    # For a double tandem, lower_limits could be [0.6, 1.3], and upper_limits could be [1.1, 2.0], 
    # so that the bottom cell bandgap's would be sampled in between 0.6 and 1.1 eV.
    # For a triple tandem, lower_limits could be [0.6, 1.0, 1.6], and upper_limits could be [1.1, 1.6, 2.5]. 
    resolution = .001  # (eV) The increment between sampled bandgap energy values.
                      # Choose .1 for fast calculations. 
                      # Choose .001 for accurate calculations
    # For more accurate caluclations, one can also increase the number of subintervals 
    # in single_cell's particle_flux integration.
    
    concentration = 1  # Concentration should be between 1 and 46200
    control = 1   # 0 for independent, 1 for series, 2 for parallel connection, 3 for intermediate band.
    # Parallel connection is slow because it has to iterate through extra possible 
    # configurations (the number of cells at each layer).
    spectrum = 0  # Solar spectrum for incident sunlight
    # spectrum= 0 for blackbody radiation
    # spectrum= 1 for AM1.5G. conc must be 1
    # spectrum= 2 for AM1.5D. conc must be in 2-46200"""

    
    
    
    
    """ Output the values """
    readout = optimize_stack(lower_limits, upper_limits, resolution, T_cell, spectrum, concentration, control)
    for i in readout:
        print(i, end='')
    
  
    
#    
#"""
#Get the average time for n uses of the code. 
#"""  
#import timeit
#def wrapper(func, *args, **kwargs):
#    def wrapped():
#        return func(*args, **kwargs)
#    return wrapped 
#wrapped = wrapper(optimize_stack,T_cell,lower_limits, upper_limits, resolution, spectrum, concentration, control)
## The arguments here should be the name of the code's main function (optimize_stack) followed by 
## that function's arguments.
#n=10
#print(timeit.timeit(wrapped, number=n)/n)

